# -*- coding: utf-8 -*-
"""
/***************************************************************************
 lllegarAreaCheckerDialog
                                 A QGIS plugin
 This plugin checks illegal areas
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-12-04
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Capstone(OSK2) / JeonBukNationalUniversity&&LX
        email                : tjdeo1102@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
from .Main import lllegalCheckMain

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.PyQt.QtWidgets import QFileDialog

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'lllegar_checker_dialog_base.ui'))


class lllegarAreaCheckerDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(lllegarAreaCheckerDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        #각 경로 입력에 맞게 텍스트 채우기
        
        self.InputImageBtn.clicked.connect(lambda: self.path_load_dialog(self.InputImage))
        self.InputModelBtn.clicked.connect(lambda: self.path_load_dialog(self.InputModel))
        self.InputDbfBtn.clicked.connect(lambda: self.path_load_dialog(self.InputDbf))
        self.OutputBtn.clicked.connect(lambda: self.path_load_dialog(self.Output))

        #설정된 입력에 대한 확인 버튼 바인딩
        self.SelBtn.accepted.connect(self.accept_act)
        self.SelBtn.rejected.connect(self.reject)


    def path_load_dialog(self, output_text_line):
        #폴더 여는 dialog생성 
        folder_path = QFileDialog.getExistingDirectory(self, '폴성 선택')

        # 사용자가 폴더를 선택했을 때만 텍스트 상자에 경로 표시
        if folder_path:
            output_text_line.setText(folder_path)

    def accept_act(self):
        if not self.check_path_and_directory(self.InputImage.text()):
            print(f"경로 {self.InputImage.text()}는 존재하지 않거나 폴더가 아닙니다.")
            self.reject()
        if not self.check_path_and_directory(self.InputModel.text()):
            print(f"경로 {self.InputModel.text()}는 존재하지 않거나 폴더가 아닙니다.")
            self.reject()
        if not self.check_path_and_directory(self.InputDbf.text()):
            print(f"경로 {self.InputDbf.text()}는 존재하지 않거나 폴더가 아닙니다.")
            self.reject()
        if not self.check_path_and_directory(self.Output.text()):
            print(f"경로 {self.Output.text()}는 존재하지 않거나 폴더가 아닙니다.")
            self.reject()
        if self.comboBox.currentIndex() == -1:
            print(f"탐지의 기준을 설정해야 합니다.")
            self.reject()
        
        ##위의 과정에서 모든 경로가 유효한 경우
        self.main = lllegalCheckMain(self.InputImage.text(),self.InputDbf.text(),self.InputModel.text(), self.Output.text(), self.comboBox.currentIndex()).run()

    def check_path_and_directory(self,path):
        """
        주어진 경로의 존재 여부와 폴더 여부를 확인하는 함수.

        :param path: 확인할 경로
        :return: 경로가 존재하고 폴더이면 True, 그렇지 않으면 False
        """
        exists = os.path.exists(path)
        is_directory = os.path.isdir(path) if exists else False
        return exists and is_directory

